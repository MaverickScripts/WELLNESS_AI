# -*- coding: utf-8 -*-
"""PROJECT_EXPO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WRqeEpBSS5_H8bS2JVNtqN-eAn9th7U8
"""

!pip install gradio pandas numpy tensorflow transformers torch pillow opencv-python mediapipe nltk plotly emoji

import gradio as gr
import pandas as pd
import numpy as np
import tensorflow as tf
from transformers import pipeline, AutoModelForCausalLM, AutoTokenizer
import torch
import cv2
import mediapipe as mp
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import json
import os
from PIL import Image
import emoji
import random
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

nltk.download('vader_lexicon', quiet=True)
nltk.download('punkt', quiet=True)
nltk.download('stopwords', quiet=True)

class WellnessAI:
    def __init__(self):
        self.initialize_components()
        self.load_resources()
        self.user_data = self.load_user_data()

    def initialize_components(self):
        # AI Models
        self.sentiment_analyzer = SentimentIntensityAnalyzer()
        self.therapy_model = AutoModelForCausalLM.from_pretrained("microsoft/DialoGPT-medium")
        self.therapy_tokenizer = AutoTokenizer.from_pretrained("microsoft/DialoGPT-medium")
        self.emotion_classifier = pipeline("text-classification",
                                        model="j-hartmann/emotion-english-distilroberta-base")

        # Activity Tracking
        self.mood_tracker = []
        self.activity_logs = []
        self.sleep_logs = []
        self.gratitude_journal = []
        self.goals = []
        self.habits = []

        # Load Resources
        self.meditation_guides = self.load_meditation_guides()
        self.exercise_routines = self.load_exercise_routines()

    def load_resources(self):
        self.wellness_activities = {
            'Mindfulness': [
                'Deep Breathing',
                'Body Scan',
                'Mindful Walking',
                'Gratitude Practice'
            ],
            'Stress Relief': [
                'Progressive Muscle Relaxation',
                'Guided Imagery',
                'Journaling',
                'Nature Sounds'
            ],
            'Physical Wellness': [
                'Yoga Poses',
                'Stretching Routines',
                'Quick Workouts',
                'Posture Exercises'
            ],
            'Mental Exercises': [
                'Positive Affirmations',
                'Cognitive Restructuring',
                'Memory Games',
                'Focus Training'
            ]
        }

        self.coping_strategies = {
            'Anxiety': [
                'Grounding Techniques',
                '4-7-8 Breathing',
                'Progressive Relaxation',
                'Worry Time'
            ],
            'Depression': [
                'Activity Scheduling',
                'Behavioral Activation',
                'Pleasant Activity List',
                'Achievement Tracking'
            ],
            'Stress': [
                'Time Management',
                'Boundary Setting',
                'Stress Journal',
                'Priority Matrix'
            ]
        }

        self.daily_quotes = self.load_quotes()
        self.wellness_tips = self.load_wellness_tips()

    def load_quotes(self):
        return [
            {
                "quote": "The greatest glory in living lies not in never falling, but in rising every time we fall.",
                "author": "Nelson Mandela",
                "category": "Motivation"
            },
            {
                "quote": "Mental health is not a destination, but a process.",
                "author": "Noam Shpancer",
                "category": "Mental Health"
            },
            {
                "quote": "Self-care is not self-indulgence, it is self-preservation.",
                "author": "Audre Lorde",
                "category": "Self-Care"
            },
            {
                "quote": "You don't have to control your thoughts. You just have to stop letting them control you.",
                "author": "Dan Millman",
                "category": "Mindfulness"
            },
            {
                "quote": "Your present circumstances don't determine where you can go; they merely determine where you start.",
                "author": "Nido Qubein",
                "category": "Growth"
            }
        ]

    def load_wellness_tips(self):
        return {
            "Morning Routine": [
                "Start with a glass of water",
                "Practice 5 minutes of deep breathing",
                "Set intentions for the day",
                "Do light stretching",
                "Write in your gratitude journal"
            ],
            "Stress Management": [
                "Take regular breaks during work",
                "Practice the 5-4-3-2-1 grounding technique",
                "Use progressive muscle relaxation",
                "Take a mindful walk",
                "Write down your worries and solutions"
            ],
            "Sleep Hygiene": [
                "Maintain a consistent sleep schedule",
                "Create a relaxing bedtime routine",
                "Limit screen time before bed",
                "Keep your bedroom cool and dark",
                "Avoid caffeine in the evening"
            ]
        }

    def load_meditation_guides(self):
        return {
            "Breathing Exercises": [
                {
                    "name": "Box Breathing",
                    "steps": [
                        "Inhale for 4 counts",
                        "Hold for 4 counts",
                        "Exhale for 4 counts",
                        "Hold for 4 counts"
                    ],
                    "duration": "5 minutes"
                },
                {
                    "name": "4-7-8 Breathing",
                    "steps": [
                        "Inhale for 4 counts",
                        "Hold for 7 counts",
                        "Exhale for 8 counts"
                    ],
                    "duration": "5 minutes"
                }
            ]
        }

    def load_exercise_routines(self):
        return {
            "Quick Breaks": [
                {
                    "name": "Desk Stretches",
                    "exercises": [
                        "Neck rolls",
                        "Shoulder shrugs",
                        "Wrist rotations",
                        "Ankle circles"
                    ],
                    "duration": "5 minutes"
                }
            ]
        }

    def load_user_data(self):
        if os.path.exists('user_data.json'):
            with open('user_data.json', 'r') as f:
                return json.load(f)
        return {
            'profile': {},
            'mood_history': [],
            'activity_history': [],
            'sleep_history': [],
            'gratitude_entries': [],
            'goals': [],
            'habits': [],
            'journal_entries': []
        }

    def save_user_data(self):
        with open('user_data.json', 'w') as f:
            json.dump(self.user_data, f)

    def track_mood(self, mood_score, emotions, notes=""):
        timestamp = datetime.now().isoformat()
        mood_entry = {
            'timestamp': timestamp,
            'score': mood_score,
            'emotions': emotions,
            'notes': notes
        }
        self.user_data['mood_history'].append(mood_entry)
        self.save_user_data()
        return self.generate_mood_insights()

    def generate_mood_insights(self):
        if not self.user_data['mood_history']:
            return "No mood data available yet."

        recent_moods = self.user_data['mood_history'][-7:]
        avg_mood = sum(float(m['score']) for m in recent_moods) / len(recent_moods)

        trend = "improving" if avg_mood > 3 else "steady" if avg_mood == 3 else "declining"

        return {
            "average_mood": round(avg_mood, 2),
            "trend": trend,
            "total_entries": len(self.user_data['mood_history']),
            "recent_emotions": [m.get('emotions', []) for m in recent_moods]
        }

    def add_journal_entry(self, entry_type, content, mood_score=None, tags=""):
        timestamp = datetime.now().isoformat()
        entry = {
            'timestamp': timestamp,
            'type': entry_type,
            'content': content,
            'mood_score': mood_score,
            'tags': [tag.strip() for tag in tags.split(',') if tag.strip()]
        }
        self.user_data['journal_entries'].append(entry)
        self.save_user_data()
        return "Journal entry saved successfully!"

    def set_goal(self, goal_type, description, target_date):
        goal = {
            'type': goal_type,
            'description': description,
            'target_date': target_date,
            'created_at': datetime.now().isoformat(),
            'completed': False
        }
        self.user_data['goals'].append(goal)
        self.save_user_data()
        return "Goal set successfully!"

    def track_habit(self, habit_name, frequency):
        habit = {
            'name': habit_name,
            'frequency': frequency,
            'created_at': datetime.now().isoformat(),
            'streak': 0,
            'last_tracked': None
        }
        self.user_data['habits'].append(habit)
        self.save_user_data()
        return "Habit created successfully!"

    def get_wellness_recommendations(self):
        recommendations = []

        # Analyze mood trends
        if self.user_data['mood_history']:
            recent_moods = [float(m['score']) for m in self.user_data['mood_history'][-7:]]
            avg_mood = sum(recent_moods) / len(recent_moods)

            if avg_mood < 3:
                recommendations.extend([
                    "Consider trying our guided meditation exercises",
                    "Schedule time for activities you enjoy",
                    "Reach out to a friend or family member"
                ])

        # Add general wellness tips
        recommendations.extend([
            random.choice(self.wellness_tips["Morning Routine"]),
            random.choice(self.wellness_tips["Stress Management"]),
            random.choice(self.wellness_tips["Sleep Hygiene"])
        ])

        return recommendations

    def generate_wellness_report(self):
        return {
            'mood_insights': self.generate_mood_insights(),
            'goals': self.user_data['goals'],
            'habits': self.user_data['habits'],
            'recommendations': self.get_wellness_recommendations(),
            'quote_of_the_day': random.choice(self.daily_quotes)
        }

class WellnessUI:
    def __init__(self):
        self.wellness_ai = WellnessAI()

    def create_interface(self):
        with gr.Blocks(theme=gr.themes.Soft()) as app:
            gr.Markdown(
                """
                # 🌟 Wellness & Mental Health Assistant
                Your personal companion for mental health and wellness tracking
                """
            )

            # Display daily quote
            quote = random.choice(self.wellness_ai.daily_quotes)
            gr.Markdown(f"> *{quote['quote']}*\n\n— {quote['author']}")

            with gr.Tabs():
                # Mood Tracking Tab
                with gr.Tab("😊 Mood Tracker"):
                    with gr.Row():
                        mood_score = gr.Slider(
                            minimum=1,
                            maximum=5,
                            step=0.5,
                            label="How are you feeling today?",
                            value=3
                        )
                        emotions = gr.Dropdown(
                            choices=["Happy", "Calm", "Anxious", "Sad", "Energetic", "Tired"],
                            multiselect=True,
                            label="Select emotions"
                        )
                    mood_notes = gr.Textbox(
                        label="Notes (optional)",
                        placeholder="What's on your mind?"
                    )
                    mood_button = gr.Button("Track Mood", variant="primary")
                    mood_insights = gr.JSON(label="Mood Insights")

                # Journal Tab
                with gr.Tab("📝 Journal"):
                    journal_type = gr.Radio(
                        choices=["Gratitude", "Reflection", "Goals", "Free Writing"],
                        label="Entry Type",
                        value="Free Writing"
                    )
                    journal_content = gr.Textbox(
                        label="Write your thoughts",
                        lines=5,
                        placeholder="Express yourself..."
                    )
                    journal_tags = gr.Textbox(
                        label="Tags (comma-separated)",
                        placeholder="e.g., personal, work, family"
                    )
                    journal_button = gr.Button("Save Entry", variant="primary")

                # Goals & Habits Tab
                with gr.Tab("🎯 Goals & Habits"):
                    with gr.Row():
                        with gr.Column():
                            gr.Markdown("### Set New Goal")
                            goal_type = gr.Dropdown(
                                choices=["Wellness", "Fitness", "Mental Health", "Personal"],
                                label="Goal Type"
                            )
                            goal_description = gr.Textbox(
                                label="Goal Description",
                                placeholder="What do you want to achieve?"
                            )
                            goal_date = gr.Textbox(
                                label="Target Date (YYYY-MM-DD)",
                                placeholder="When do you want to achieve this?"
                            )
                            goal_button = gr.Button("Set Goal", variant="primary")

                        with gr.Column():
                            gr.Markdown("### Track Habit")
                            habit_name = gr.Textbox(
                                label="Habit Name",
                                placeholder="e.g., Meditation, Exercise"
                            )
                            habit_frequency = gr.Dropdown(
                                choices=["Daily", "Weekly", "Monthly"],
                                label="Frequency"
                            )
                            habit_button = gr.Button("Create Habit", variant="primary")

                # Wellness Report Tab
                with gr.Tab("📊 Wellness Report"):
                    report_button = gr.Button("Generate Report", variant="primary")
                    report_output = gr.JSON(label="Your Wellness Report")

            # Event handlers
            mood_button.click(
                fn=self.wellness_ai.track_mood,
                inputs=[mood_score, emotions, mood_notes],
                outputs=mood_insights
            )

            journal_button.click(
                fn=self.wellness_ai.add_journal_entry,
                inputs=[journal_type, journal_content, mood_score, journal_tags]
            )

            goal_button.click(
                fn=self.wellness_ai.set_goal,
                inputs=[goal_type, goal_description, goal_date]
            )

            habit_button.click(
                fn=self.wellness_ai.track_habit,
                inputs=[habit_name, habit_frequency]
            )

            report_button.click(
                fn=self.wellness_ai.generate_wellness_report,
                outputs=report_output
            )

        return app

if __name__ == "__main__":
    interface = WellnessUI()
    demo = interface.create_interface()
    demo.launch(share=True)

